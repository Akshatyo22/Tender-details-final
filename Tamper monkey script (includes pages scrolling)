// ==UserScript==
// @name         Tender Scraper with Auto-Pagination
// @namespace    http://tampermonkey.net/
// @version      2.0
// @description  Scrapes tender data from all pages and sends it to a Google Sheet.
// @author       You
// @match        https://www.tenderdetail.com/registeruser/*
// @grant        GM_xmlhttpRequest
// @grant        GM_addStyle
// @connect      script.google.com
// @connect      axitrust.com
// ==/UserScript==

(function() {
    'use strict';

    // --- CONFIGURATION ---
    const googleAppScriptUrl = 'https://script.google.com/macros/s/AKfycbyJSFal4MgzP_EDmhgemjj6K328sxKvfNt-9BUPXC4jhaDm1GGCffBFDUv6WocNVegt/exec';
    let isScrapingStopped = false; // Flag to control the scraping loop

    // --- HELPER FUNCTIONS ---

    function waitForElement(selector, timeout = 10000) {
        return new Promise((resolve, reject) => {
            const interval = setInterval(() => {
                const element = document.querySelector(selector);
                if (element) {
                    clearInterval(interval);
                    resolve(element);
                }
            }, 100);
            setTimeout(() => {
                clearInterval(interval);
                reject(new Error(`Element "${selector}" not found after ${timeout}ms`));
            }, timeout);
        });
    }

    function extractTenderData() {
        const extractedData = {};
        extractedData.beneficiary = document.querySelector('.successtxt2 .col-md-6.col-sm-12.pb-2 > span:first-of-type')?.textContent.trim() || 'Uncategorized Tenders';
        extractedData.targetSheet = extractedData.beneficiary;
        const tenderNoElement = Array.from(document.querySelectorAll('strong')).find(el => el.textContent.includes('Tender No'));
        extractedData.tenderNo = tenderNoElement ? tenderNoElement.nextElementSibling?.textContent.trim() : 'Not found';
        const tenderIdElement = Array.from(document.querySelectorAll('strong')).find(el => el.textContent.includes('Tender ID'));
        extractedData.tenderId = tenderIdElement ? tenderIdElement.nextElementSibling?.textContent.trim() : 'Not found';
        const tenderBriefElement = Array.from(document.querySelectorAll('strong')).find(el => el.textContent.includes('Tender Brief'));
        extractedData.tenderBrief = tenderBriefElement ? tenderBriefElement.nextElementSibling?.textContent.trim() : 'Not found';
        const cityStateLabel = Array.from(document.querySelectorAll('b')).find(el => el.textContent.includes('City/State'));
        extractedData.cityState = cityStateLabel ? cityStateLabel.nextElementSibling?.textContent.replace(/\s+/g, ' ').trim() : 'Not found';
        const tenderValueBlock = Array.from(document.querySelectorAll('.description-block')).find(block => block.textContent.includes('Tender Value'));
        extractedData.tenderValue = tenderValueBlock ? tenderValueBlock.querySelector('label[style*="color:red"]')?.textContent.trim() : 'Not found';
        const contractValueBlock = Array.from(document.querySelectorAll('.description-block')).find(block => block.textContent.includes('Contract Value'));
        extractedData.contractValue = contractValueBlock ? contractValueBlock.querySelector('label[style*="color:red"]')?.textContent.trim() : 'Not found';
        const submissionDateBlock = Array.from(document.querySelectorAll('.description-block')).find(block => block.textContent.includes('Submission Date'));
        extractedData.submissionDate = submissionDateBlock ? submissionDateBlock.querySelector('label[style*="color:red"]')?.textContent.trim() : 'Not found';
        const contractDateBlock = Array.from(document.querySelectorAll('.description-block')).find(block => block.textContent.includes('Contract Date'));
        extractedData.contractDate = contractDateBlock ? contractDateBlock.querySelector('label[style*="color:red"]')?.textContent.trim() : 'Not found';
        const completionDateBlock = Array.from(document.querySelectorAll('.description-block')).find(block => block.textContent.includes('Completion Date'));
        extractedData.completionDate = completionDateBlock ? completionDateBlock.querySelector('label[style*="color:red"]')?.textContent.trim() : 'Not found';
        const awardedBidderLabel = Array.from(document.querySelectorAll('.info-box-number')).find(el => el.textContent.includes('Awarded Bidder(s)'));
        if (awardedBidderLabel && awardedBidderLabel.nextElementSibling) {
            extractedData.awardedBidder = awardedBidderLabel.nextElementSibling.querySelector('.badge')?.textContent.trim() || 'Not found';
        } else {
            extractedData.awardedBidder = 'Not found';
        }
        const bidders = [];
        const rows = document.querySelectorAll('.table.table-bordered.no-margin tbody tr');
        rows.forEach(row => {
            const cells = row.querySelectorAll('td');
            if (cells.length > 0) {
                bidders.push({
                    srNo: cells[0]?.textContent.trim(),
                    bidderName: cells[1]?.textContent.trim(),
                    bidAnalyticsLink: cells[2]?.querySelector('a')?.href,
                    technicalBid: cells[3]?.querySelector('.fa-check') ? 'Yes' : 'No',
                    financialBid: cells[4]?.querySelector('.fa-check') ? 'Yes' : 'No',
                    aoc: cells[5]?.querySelector('.fa-check') ? 'Yes' : 'No',
                    bidValue: cells[6]?.textContent.trim(),
                    rank: cells[7]?.textContent.trim()
                });
            }
        });
        bidders.sort((a, b) => {
            const rankA = parseInt(a.rank.replace('L', ''), 10);
            const rankB = parseInt(b.rank.replace('L', ''), 10);
            return rankA - rankB;
        });
        extractedData.bidders = bidders;
        extractedData.url = window.location.href;
        return extractedData;
    }

    function sendDataToGoogleSheet(data) {
        return new Promise((resolve, reject) => {
            GM_xmlhttpRequest({
                method: 'POST',
                url: googleAppScriptUrl,
                data: JSON.stringify(data),
                headers: { 'Content-Type': 'application/json' },
                onload: (response) => {
                    console.log('Data sent:', response.responseText);
                    resolve(response);
                },
                onerror: (error) => {
                    console.error('Error sending data:', error);
                    reject(error);
                }
            });
        });
    }

    async function startScraping() {
        const scrapeBtn = document.getElementById('scrapeBtn');
        if (scrapeBtn.disabled) return;

        // --- Change button to a "Stop" button ---
        isScrapingStopped = false;
        scrapeBtn.textContent = 'Stop Scraping';
        scrapeBtn.style.backgroundColor = '#dc3545'; // Red color
        scrapeBtn.onclick = () => {
            isScrapingStopped = true;
            scrapeBtn.textContent = 'Stopping...';
            scrapeBtn.disabled = true;
            console.log('Scraping will stop after this page completes.');
        };

        let pageCount = 1;
        while (!isScrapingStopped) {
            console.log(`--- Scraping Page ${pageCount} ---`);
            const totalRows = document.querySelectorAll('.tender_row').length;
            console.log(`Found ${totalRows} tenders on this page.`);

            for (let i = 0; i < totalRows; i++) {
                // Check if user has clicked "Stop" before processing the next item
                if (isScrapingStopped) break;

                const row = document.querySelectorAll('.tender_row')[i];
                const viewResultLink = row.querySelector('.viewnotice');

                if (viewResultLink) {
                    console.log(`Processing tender ${i + 1}/${totalRows}...`);
                    scrapeBtn.textContent = `Page ${pageCount}: Scraping ${i + 1}/${totalRows}`;

                    try {
                        viewResultLink.click();
                        await waitForElement('#freshTenderDetail[style*="block"]');
                        await new Promise(r => setTimeout(r, 1000)); // Wait for data to render

                        const tenderData = extractTenderData();
                        await sendDataToGoogleSheet(tenderData);

                    } catch (error) {
                        console.error(`Failed to process tender ${i + 1}:`, error);
                    }

                    const backButton = await waitForElement('#back');
                    backButton.click();
                    await waitForElement('#freshTenders[style*="block"]');
                    await new Promise(r => setTimeout(r, 500));
                }
            }

            if (isScrapingStopped) {
                console.log('Scraping stopped by user.');
                break;
            }

            // --- Find and click the 'Next' button ---
            const nextButton = document.querySelector('a#next');

            // Check if the button exists and its parent 'li' is not disabled
            if (nextButton && !nextButton.parentElement.classList.contains('disabled')) {
                console.log('Navigating to the next page...');
                nextButton.click();
                pageCount++;
                // Wait for new page content to load
                await new Promise(r => setTimeout(r, 2000)); // Static wait for safety
                await waitForElement('.tender_row'); // Wait for the first tender row to appear
            } else {
                console.log('No more pages to scrape. Reached the end.');
                break; // Exit the loop if no 'Next' button is found
            }
        }

        // --- Finalize and reset the button ---
        if (isScrapingStopped) {
            scrapeBtn.textContent = 'Scraping Stopped!';
            scrapeBtn.style.backgroundColor = '#ffc107'; // Yellow color
        } else {
            scrapeBtn.textContent = 'Scraping Complete!';
            scrapeBtn.style.backgroundColor = '#28a745'; // Green color
        }
        scrapeBtn.disabled = true; // Keep it disabled after completion/stopping
    }

    function initialize() {
        if (document.getElementById('scrapeBtn')) return;

        const scrapeBtn = document.createElement('button');
        scrapeBtn.textContent = 'Start Scraping (Ctrl+Shift+S)';
        scrapeBtn.id = 'scrapeBtn';
        scrapeBtn.addEventListener('click', startScraping);
        document.body.appendChild(scrapeBtn);

        GM_addStyle(`
            #scrapeBtn {
                position: fixed; top: 10px; right: 10px; z-index: 9999;
                padding: 10px 15px; background-color: #007bff; color: white;
                border: none; border-radius: 5px; cursor: pointer; font-size: 14px;
                transition: background-color 0.3s;
            }
            #scrapeBtn:disabled { cursor: not-allowed; }
        `);
    }

    document.addEventListener('keydown', function(event) {
        if (event.ctrlKey && event.shiftKey && event.key.toLowerCase() === 's') {
            event.preventDefault();
            const scrapeBtn = document.getElementById('scrapeBtn');
            if (scrapeBtn) {
                scrapeBtn.click();
            }
        }
    });

    if (window.location.href.includes('tenderresultsearchtenders')) {
        setTimeout(initialize, 500);
    }
})();
